const svg=document.querySelector(".js-activity-overview-graph");const svgPath=svg.querySelector("path");const existingEllipses=svg.querySelectorAll("ellipse");const frameDelay=1000/30;let originalSvgData;let frameIndex=0;let animationIntervalId;let animationStarted=false;const develop=false;const framesSrc=develop?"data/frames.json":"https://raw.githubusercontent.com/GuillaumeMCK/BadApple/main/src/data/frames.json";const audioSrc=develop?"data/track.json":"https://raw.githubusercontent.com/GuillaumeMCK/BadApple/main/src/data/track.json";async function fetchAnimationData(){try{if(!fetchAnimationData.cachedData){const response=await fetch(framesSrc);fetchAnimationData.cachedData=await response.json();};return fetchAnimationData.cachedData;}catch(error){console.error("Error reading frames.json:",error);}};async function fetchAudioData(){try{if(!fetchAudioData.cachedData){const response=await fetch(audioSrc);fetchAudioData.cachedData=await response.json();};return fetchAudioData.cachedData;}catch(error){console.error("Error reading track.json:",error);}};function getPathFromPolygons(polygons){return polygons.map(polygon=>`M${polygon.join(" L")}Z`).join(" ");};function updateFrame(frame){const transform=svg.querySelector("g").getCTM().inverse();svgPath.setAttribute("d",getPathFromPolygons(frame.polygons));svgPath.setAttribute("transform",`translate(${transform.e},${transform.f})`);svgPath.setAttribute("stroke-width",".5");};function onAnimationFinish(){clearInterval(animationIntervalId);svg.parentNode.replaceChild(originalSvgData.cloneNode(true),svg);console.log("Animation finished!");animationStarted=false;};function playFrames(data){updateFrame(data[frameIndex]);frameIndex=(frameIndex+1)%data.length;if(frameIndex===0){onAnimationFinish();}};function initializeAnimation(){console.log('%c Bad Apple!! 🍎','background: #222; color: white; font-size: 24px; padding: 10px; border-radius: 5px;');if(!originalSvgData){originalSvgData=svg.cloneNode(true);};runAnimation();};async function runAnimation(){const audio=await loadAudio();const animation=await loadAnimation();audio.start();await animation();};async function loadAnimation(){const data=await fetchAnimationData();async function startAnimation(){if(!animationStarted){existingEllipses.forEach(ellipse=>(ellipse.style.display="none"));animationStarted=true;animationIntervalId=setInterval(()=>playFrames(data),frameDelay);}};return startAnimation;};function loadAudio(){return new Promise((resolve,reject)=>{fetchAudioData().then(data=>{const audioCtx=new(window.AudioContext||window.webkitAudioContext)();const buffer=new Uint8Array(data.hex.match(/.{1,2}/g).map(byte=>parseInt(byte,16)));audioCtx.decodeAudioData(buffer.buffer,function(decodedData){const source=audioCtx.createBufferSource();source.buffer=decodedData;const gainNode=audioCtx.createGain();gainNode.gain.value=0.25;source.connect(gainNode);gainNode.connect(audioCtx.destination);resolve(source);}).catch(e=>reject(e));}).catch((error)=>console.error("Error reading track.json:",error));});};initializeAnimation();